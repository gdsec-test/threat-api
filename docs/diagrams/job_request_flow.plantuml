@startuml "job_request_flow"
skinparam BoxPadding 10
actor User

box "AWS" #LightBlue

participant WAF
participant "API\nGateway" as API_Gateway
participant "JWT\nAuthorizer" as JWT_Authorizer

== User makes new job request ==

User -> WAF : POST request
WAF -> API_Gateway : POST request
API_Gateway -> JWT_Authorizer: Check JWT
JWT_Authorizer -> API_Gateway: JWT valid
API_Gateway -> Manager : Request
activate Manager
Manager -> Manager : Encrypt submission
Manager -> DynamoDB : Store jobId and encrypted submission
Manager -> SNS : Publish job submission
Manager -> User : jobId
deactivate Manager
note over User : At this point the \n request is done and the user \n must poll for the result
collections "Job Lambda\n(ServiceNow)" as Job_Lambda
SNS -> Job_Lambda : invokes
activate Job_Lambda
participant SQS
participant "Response\nProcessor" as ResponseProcessor
database DynamoDB

end box

box "Internet" #LightGrey

Job_Lambda -> ServiceNow : Request
ServiceNow -> Job_Lambda : Response
Job_Lambda -> SQS : Enqueue output
note over Job_Lambda : Job done
deactivate Job_Lambda

SQS -> ResponseProcessor : invokes
activate ResponseProcessor
ResponseProcessor -> ResponseProcessor : Encrypt results
ResponseProcessor -> DynamoDB : Store output
deactivate ResponseProcessor

end box

== User retrieves job status and output ==

User -> WAF : GET status
WAF -> API_Gateway : GET status
API_Gateway -> JWT_Authorizer: Check JWT
JWT_Authorizer -> API_Gateway: JWT valid
API_Gateway -> Manager : Request
activate Manager
Manager -> DynamoDB : Get jobId
DynamoDB -> Manager : Job output
Manager -> Manager : Decrypt original submission\nand each response
Manager -> User : Job output
deactivate Manager

@enduml
