AWSTemplateFormatVersion: 2010-09-09
Description: ThreatTools API Core Resources

Parameters:
  APIHash:
    Type: String
    Description: SHA1 hash of the API Gateway specification
    Default: ""

Resources:
  SwaggerUIRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: threattools-custom-SwaggerUIRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  SwaggerUIBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub gd-threattools-${AWS::AccountId}-swagger-ui-bucket

  SwaggerUILambda:
    DependsOn:
      - SwaggerUIRole
      - SwaggerUIBucket
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3
          def handler(event, context):
              try:
                  s3_key = event["pathParameters"]["proxy"]
              except:
                  s3_key = "index.html"
              try:
                  s3_object = boto3.resource("s3").Object("gd-threattools-${AWS::AccountId}-swagger-ui-bucket", s3_key)
                  result = {
                      "statusCode": 200,
                      "headers": {"Content-Type": s3_object.content_type},
                      "body": s3_object.get().get("Body").read().decode("utf-8"),
                  }
              except:
                  result = {"statusCode": 404, "body": "NOT FOUND"}
              return result
      Description: Serves Swagger UI resources from S3
      FunctionName: SwaggerUI
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt SwaggerUIRole.Arn
      Runtime: python3.7
      Timeout: 15

  AuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: threattools-custom-AuthorizerRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  AuthorizerLambda:
    DependsOn:
      - AuthorizerRole
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          # Stub authorizer that denies everything
          raise Exception("ACCESS DENIED")
      Description: Validates JWTs when API Gateway resources are accessed
      FunctionName: authorizer
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt AuthorizerRole.Arn
      Runtime: python3.6
      Timeout: 5

  ThreatPolicyDynamoDB:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: threattools-custom-ThreatPolicyDynamoDB
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:DeleteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Resource: "*"

  ThreatPolicySNS:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: threattools-custom-ThreatPolicySNS
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref ThreatJobRequestsTopic

  ThreatPolicySQS:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: threattools-custom-ThreatPolicySQS
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: "arn:aws:sqs:*:*:*"

  ThreatRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: threattools-custom-ThreatRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref ThreatPolicySQS
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  ThreatManagerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: threattools-custom-ThreatManagerRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref ThreatPolicyDynamoDB
        - !Ref ThreatPolicySNS
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  ThreatResponseProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: threattools-custom-ThreatResponseProcessorRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref ThreatPolicyDynamoDB
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  ThreatJobRequestsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: JobRequests

  ThreatJobRequestsTopicParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /ThreatTools/JobRequests
      Type: String
      Value: !Ref ThreatJobRequestsTopic

  ThreatJobResponsesQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: JobResponses
      VisibilityTimeout: 5400

  ThreatJobResponsesQueueParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /ThreatTools/JobResponses
      Type: String
      Value: !Ref ThreatJobResponsesQueue

  ThreatEncryptionKeyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: Id
          AttributeType: S
        -
          AttributeName: Created
          AttributeType: N
      KeySchema:
        -
          AttributeName: Id
          KeyType: HASH
        -
          AttributeName: Created
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: EncryptionKey

  ThreatJobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: job_id
          AttributeType: S
      KeySchema:
        -
          AttributeName: job_id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: jobs

  ThreatAPI:
    DependsOn: SwaggerUILambda
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ThreatAPI
      Description: !Sub ThreatTools API (${APIHash})
      EndpointConfiguration:
        Types:
          - REGIONAL
      BodyS3Location:
        Bucket: !Sub gd-threattools-${AWS::AccountId}-code-bucket
        Key: api-setup.json
      Policy:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal: "*"
            Action: execute-api:Invoke
            Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/gddeploy/*/*"

  ThreatAPIAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerResultTtlInSeconds: 0
      AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:authorizer/invocations
      Name: !Sub "${ThreatAPI}-JWTAuthorizer"
      RestApiId: !Sub "${ThreatAPI}"
      Type: REQUEST

  ThreatDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ThreatAPI
      StageName: gddeploy

  SwaggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:SwaggerUI
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ThreatAPI}/gddeploy/*/*"

  AuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:authorizer
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ThreatAPI}/authorizers/*"

Outputs:
  ThreatURL:
    Value: !Sub "https://${ThreatAPI}.execute-api.${AWS::Region}.amazonaws.com/gddeploy"
