name: ThreatAPI Deployment (DEV-PRIVATE)

# Deploys the ThreatAPI main branch to the AWS DEV PRIVATE environment using sceptre.

# This workflow needs to run on a self-hosted runner for the time being,
# because "go get" can't access modules on github.secureserver.net correctly
# when running on a GitHub hosted runner, even when the typical workarounds are
# in place to rewrite URLs from https://github.secureserver.net to
# git@github.secureserver.net and the GOPRIVATE environment variable has been
# set.

# It may be possible to avoid this restriction by reading:
# https://tip.golang.org/cmd/go/#hdr-Remote_import_paths
# and modifying modules that exist on github.secureserver.net by specifying
# ".git" in the import list, since the golang tools don't know that the vcs
# type of github.secureserver.net is "git".

# See: https://github.com/golang/go/issues/38964

# For now, can only be deployed manually through workflow_dispatch - Select your branch while running
on:
  workflow_dispatch:

jobs:
  deploy_to_dev_private:
    runs-on: [self-hosted,threat-runners]

    steps:
      - name: Reset gitconfig
        run: |
          rm -f $HOME/.gitconfig

      - name: Checkout
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b

      - name: Add Environmental Vars
        run: |
          echo DEPLOY_ROLE=arn:aws:iam::345790377847:role/GD-AWS-USA-GD-ThreatTools-Dev-Private-Deploy >> $GITHUB_ENV

      - name: Get Secrets
        id: masked-secrets
        run: |
          while [[ -z "$AWS_RESPONSE" ]]
          do
              AWS_RESPONSE=`aws --region=us-west-2 secretsmanager get-secret-value --secret-id=/GitHub/Runner-Secrets`
              sleep 1
          done
          CI_TOKEN=`echo $AWS_RESPONSE | jq -r .SecretString | jq -r .PAT`
          echo "::set-output name=ci-token::$CI_TOKEN"
          echo "::add-mask::$CI_TOKEN"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE }}
          role-duration-seconds: 7200 # 2 hours
          role-skip-session-tagging: true
          aws-region: us-west-2

      - name: Setup python environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install -U pip
          pip install sceptre

      - name: Install python and other dependencies
        env:
          GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
          SECURESERVER_ACCESS_KEY_GHC_SA: ${{ secrets.SECURESERVER_ACCESS_KEY_GHC_SA }}
        run: |
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${SECURESERVER_ACCESS_KEY_GHC_SA}"

          source venv/bin/activate
          chmod u+x ./getpipconf.sh
          ./getpipconf.sh
          pip install -U -r requirements.txt -r requirements-test.txt

      - name: Setup golang environment
        uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568
        with:
          go-version: '1.17.2'

      - name: Install golang dependencies
        env:
          GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
          SECURESERVER_ACCESS_KEY_GHC_SA: ${{ secrets.SECURESERVER_ACCESS_KEY_GHC_SA }}
          GITHUBCLOUD_SSH_PRIVATE_KEY: ${{ secrets.GITHUBCLOUD_SSH_PRIVATE_KEY }}
          GH_ACCESS_TOKEN: ${{ steps.masked-secrets.outputs.ci-token }}
          GOPRIVATE: "github.secureserver.net,github.com/gdcorp-*"
        run: |
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${SECURESERVER_ACCESS_KEY_GHC_SA}"
          ssh-add - <<< "${GITHUBCLOUD_SSH_PRIVATE_KEY}"

          git config --global url.git@github.secureserver.net:.insteadOf https://github.secureserver.net/
          git config --global url.https://$GH_ACCESS_TOKEN@github.com/.insteadOf https://github.com/
          go mod tidy

          ssh-agent -k

#      This script automatically updates your sceptre files based on directories in apis/.
#      Note: It's infrastructure on fly and not written back to github
      - name: Run tools/generate_sceptre.py
        run: |
          source venv/bin/activate
          cd tools
          python3 generate_sceptre.py

      - name: Run sceptre
        run: |
          source venv/bin/activate
          cd sceptre
          aws s3 cp templates/SC-ServiceLambdas.yaml s3://gd-threattools-dev-private-code-bucket/template/SC-ServiceLambdas.yaml --quiet
          sceptre launch -y dev-private/us-west-2

      - name: Update swagger
        run: |
          source venv/bin/activate
          cd sceptre
          ./resources/swagger-ui-bucket-create.sh
