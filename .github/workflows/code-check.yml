name: Code quality check

on:
  pull_request:
    branches: [ develop ]
  workflow_dispatch:

jobs:
  tartufo:
    runs-on: [self-hosted,threat-runners]
    steps:
      - name: Add Environmental Vars
        run: |
          echo DEPLOY_ROLE=arn:aws:iam::345790377847:role/GD-AWS-USA-GD-ThreatTools-Dev-Private-Deploy >> $GITHUB_ENV
          
      - name: Get Secrets
        id: masked-secrets
        run: |
          while [[ -z "$AWS_RESPONSE" ]]
          do
              AWS_RESPONSE=`aws --region=us-west-2 secretsmanager get-secret-value --secret-id=/GitHub/Runner-Secrets`
              sleep 1
          done
          CI_TOKEN=`echo $AWS_RESPONSE | jq -r .SecretString | jq -r .PAT`
          echo "::set-output name=ci-token::$CI_TOKEN"
          echo "::add-mask::$CI_TOKEN"
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE }}
          role-duration-seconds: 7200 # 2 hours
          role-skip-session-tagging: true
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@3d4e073ce6a6845ed27b30a0fe05b6e22c80ac6b

      - name: Docker login for Golden Containers ECR
        env:
          ECR_REGISTRY: 764525110978.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com # Do NOT change (region pulled from above)!
        run: |
          echo "Using: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Checkout Current Repo to be Scanned
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b

      - name: Checkout Tartufo Repo
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
        with:
          repository: gdcorp-actions/tartufo
          token: ${{ steps.masked-secrets.outputs.ci-token }} # PAT with read access to gdcorp-actions/tartufo
          path: tartufo
          ref: main
          persist-credentials: false # Do not persist auth token in local git config.

      - name: Tartufo secret scanning using the Tartufo GitHub Action
        uses: ./tartufo
        with:
          github_token: ${{ steps.masked-secrets.outputs.ci-token }}

  python-code-check:
    needs: tartufo
    runs-on: [self-hosted,threat-runners]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b

      - name: Add Environmental Vars
        run: |
          echo DEPLOY_ROLE=arn:aws:iam::345790377847:role/GD-AWS-USA-GD-ThreatTools-Dev-Private-Deploy >> $GITHUB_ENV
          
      - name: Get Secrets
        id: masked-secrets
        run: |
          while [[ -z "$AWS_RESPONSE" ]]
          do
              AWS_RESPONSE=`aws --region=us-west-2 secretsmanager get-secret-value --secret-id=/GitHub/Runner-Secrets`
              sleep 1
          done
          CI_TOKEN=`echo $AWS_RESPONSE | jq -r .SecretString | jq -r .PAT`
          echo "::set-output name=ci-token::$CI_TOKEN"
          echo "::add-mask::$CI_TOKEN"
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE }}
          role-duration-seconds: 7200 # 2 hours
          role-skip-session-tagging: true
          aws-region: us-west-2

      - name: Set up Python 3.9.0
        uses: actions/setup-python@d09bd5e6005b175076f227b13d9730d56e9dcfcb
        with:
          python-version: 3.9.0
          architecture: 'x64'

      - name: Setup Python Environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install -U pip

      - name: Install Python dependencies
        env:
          SECURESERVER_ACCESS_KEY_GHC_SA: ${{ secrets.SECURESERVER_ACCESS_KEY_GHC_SA }}
          GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
        run: |
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${SECURESERVER_ACCESS_KEY_GHC_SA}"
          source venv/bin/activate
          python -m pip install --upgrade pip
          chmod u+x ./getpipconf.sh
          ./getpipconf.sh
          pip install -U -r requirements.txt -r requirements-test.txt
          pip install -U -r apis/trustar/requirements.txt
          ssh-agent -k
#       flask8 is failing on lot of files, switching off temporarily
#      - name: Lint with flake8
#        run: |
#          source venv/bin/activate
#          flake8 ./apis  ./tools ./sceptre/resources/authorizer
#       Pylint is failing on lot of files, switching off temporarily
#       - name: Lint with pylint
#         run: |
#           source venv/bin/activate
#           pylint ./apis ./sceptre/resources/authorizer ./tools

      - name: Static security analysis with Bandit
        run: |
          source venv/bin/activate
          bandit -r  ./apis ./sceptre/resources/authorizer ./tools
      - name: Python Tests
        run: |
          source venv/bin/activate
          python -m pytest -v

  go-code-check:
    needs: tartufo
    runs-on: [self-hosted,threat-runners]

    steps:
      - name: Reset gitconfig
        run: |
          rm -f $HOME/.gitconfig
      - name: Checkout this repository
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b

      - name: Add Environmental Vars
        run: |
          echo DEPLOY_ROLE=arn:aws:iam::345790377847:role/GD-AWS-USA-GD-ThreatTools-Dev-Private-Deploy >> $GITHUB_ENV
          
      - name: Get Secrets
        id: masked-secrets
        run: |
          while [[ -z "$AWS_RESPONSE" ]]
          do
              AWS_RESPONSE=`aws --region=us-west-2 secretsmanager get-secret-value --secret-id=/GitHub/Runner-Secrets`
              sleep 1
          done
          CI_TOKEN=`echo $AWS_RESPONSE | jq -r .SecretString | jq -r .PAT`
          echo "::set-output name=ci-token::$CI_TOKEN"
          echo "::add-mask::$CI_TOKEN"
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
        with:
          role-to-assume: ${{ env.DEPLOY_ROLE }}
          role-duration-seconds: 7200 # 2 hours
          role-skip-session-tagging: true
          aws-region: us-west-2
          
      - name: Set up Go
        uses: actions/setup-go@268d8c0ca0432bb2cf416faae41297df9d262d7f
        with:
          go-version: '1.17.2'

      - name: Install dependencies
        env:
          GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
          SECURESERVER_ACCESS_KEY_GHC_SA: ${{ secrets.SECURESERVER_ACCESS_KEY_GHC_SA }}
          GITHUBCLOUD_SSH_PRIVATE_KEY: ${{ secrets.GITHUBCLOUD_SSH_PRIVATE_KEY }}
          GH_ACCESS_TOKEN: ${{ steps.masked-secrets.outputs.ci-token }}
          GOPRIVATE: "github.secureserver.net,github.com/gdcorp-*"
        run: |
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${SECURESERVER_ACCESS_KEY_GHC_SA}"
          ssh-add - <<< "${GITHUBCLOUD_SSH_PRIVATE_KEY}"
          git config --global url.git@github.secureserver.net:.insteadOf https://github.secureserver.net/
          git config --global url.https://$GH_ACCESS_TOKEN@github.com/.insteadOf https://github.com/
          go mod tidy
          ssh-agent -k
          
      - name: Go code checks and build
        run: |
          go fmt ./...
          go build ./...
          
      - name: Running go tests
        run: |
          go test ./... -tags runTests -gcflags=all=-l -cover

# List of tests skipped due to using real objects where mocks are required. To be later refined in unit test revamping.
#
#  1. /apis/servicenow/servicenowLibrary/servicenow_test.go
#  2. /apis/servicenow/servicenowLibrary/table_test.go
#  4. /apis/shodan/shodan_test.go
#  5. /apis/virustotal/virustotal_test.go

# Added separated jira stories for /lambdas folder as they aren't the usual "api" modules for unit testing
#  6. /lambdas/common/toolbox/sso_test.go
#  7. /lambdas/responseprocessor/responseprocessor_test.go

  javascript-code-check:
    needs: tartufo
    runs-on: [self-hosted,threat-runners]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b

      - name: Set up Javascript 3.9.0
        uses: actions/setup-node@5b949b50c3461bbcd5a540b150c368278160234a
        with:
          node-version: 12.20.0

      - name: Install NVM to support NodeJS Version, all dependencies, Test and Build each code for only Javascript functions
        run: |
          touch lambdas/cpesubmit/.npmrc
          cat > lambdas/cpesubmit/.npmrc <<EOF
          registry=https://artifactory.secureserver.net/artifactory/api/npm/node-virt/
          //artifactory.secureserver.net/artifactory/api/npm/node-virt/:_authToken=${{ secrets.NPM_ARTIFACTORY_TOKEN }}
          EOF
          touch lambdas/cpereport/.npmrc
          cat > lambdas/cpereport/.npmrc <<EOF
          registry=https://artifactory.secureserver.net/artifactory/api/npm/node-virt/
          //artifactory.secureserver.net/artifactory/api/npm/node-virt/:_authToken=${{ secrets.NPM_ARTIFACTORY_TOKEN }}
          EOF
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash
          source ~/.bashrc
          source ~/.nvm/nvm.sh
          for d in lambdas/* ; do
          if test -f "$d/package.json"; then
            pushd .
            cd "$d"
            nvm install
            nvm use
            if test -f "$d/.npmrc"; then
              npm whoami --registry https://artifactory.secureserver.net/artifactory/api/npm/node-virt/
            fi;
            npm i
            npm run test-ci
            popd
          fi;
          done

# TODO: Remove Test line here
#          git config --global url.git@github.com:gdcorp-.insteadOf https://github.com/gdcorp-
