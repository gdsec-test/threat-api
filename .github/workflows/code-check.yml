name: Code quality check

on:
  pull_request:
    branches: [ main ]

jobs:
  tartufo:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials for ECR access
        uses: aws-actions/configure-aws-credentials@a17646e2633d1f79886a1530ccce16c95a3bb8dc
        with:
          aws-access-key-id: ${{ secrets.DEV_PRIVATE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_PRIVATE_AWS_SECRET_ACCESS_KEY }}
          role-to-assume: arn:aws:iam::345790377847:role/GD-AWS-USA-GD-ThreatTools-Dev-Private-Deploy
          role-duration-seconds: 1200                                 # default max is 7200
          aws-region: us-west-2                                       # set region you want to target

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@41032bd0f8164c350fb597a5e1ec886624de7465

      - name: Docker login for Golden Containers ECR
        env:
          ECR_REGISTRY: 764525110978.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com # Do NOT change (region pulled from above)!
        run: |
          echo "Using: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Checkout Current Repo to be Scanned
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Checkout Tartufo Repo
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
        with:
          repository: gdcorp-actions/tartufo
          token: ${{ secrets.REPO_CLONE_TOKEN_SA_PAT }} # PAT with read access to gdcorp-actions/tartufo
          path: tartufo
          ref: main
          persist-credentials: false # Do not persist auth token in local git config.

      - name: Tartufo secret scanning using the Tartufo GitHub Action
        uses: ./tartufo
        with:
          github_token: ${{ secrets.REPO_CLONE_TOKEN_SA_PAT }}

  python-code-check:
    needs: tartufo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Set up Python 3.9.0
        uses: actions/setup-python@a1121449a217580167611672a6c61b4cf314e0f2
        with:
          python-version: 3.9.0
          architecture: 'x64'

      - name: Setup Python Environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install -U pip
      - name: Install Python dependencies
        env:
          SECURESERVER_ACCESS_KEY_GHC_SA: ${{ secrets.SECURESERVER_ACCESS_KEY_GHC_SA }}
          GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
        run: |
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${SECURESERVER_ACCESS_KEY_GHC_SA}"
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -U -r requirements.txt -r requirements-test.txt
          ssh-agent -k
      - name: Lint with flake8
        run: |
          source venv/bin/activate
          flake8 ./apis  ./tools ./sceptre/resources/authorizer
      # Pylint is failing on lot of files, switching off temporarily
      # - name: Lint with pylint
      #   run: |
      #     source venv/bin/activate
      #     pylint ./apis ./sceptre/resources/authorizer ./tools

      - name: Static security analysis with Bandit
        run: |
          source venv/bin/activate
          bandit -r  ./apis ./sceptre/resources/authorizer ./tools
      - name: Python Tests
        run: |
          source venv/bin/activate
          python -m pytest -v
  go-code-check-apis:
    needs: tartufo
    runs-on: self-hosted

    strategy:
      matrix:
        go-apis: [geoip, whois] # Add golang apis modules here.    TODO: Look for script to find golang or python rather than matrix specification

    steps:
      - name: Reset gitconfig
        run: |
          rm -f $HOME/.gitconfig
      - name: Checkout this repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Set up Go
        uses: actions/setup-go@3b4dc6cbed1779f759b9c638cb83696acea809d1
        with:
          go-version: '1.15.6'

      - name: Install dependencies
        env:
          GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
          SECURESERVER_ACCESS_KEY_GHC_SA: ${{ secrets.SECURESERVER_ACCESS_KEY_GHC_SA }}
          GITHUBCLOUD_SSH_PRIVATE_KEY: ${{ secrets.GITHUBCLOUD_SSH_PRIVATE_KEY }}
          GOPRIVATE: "github.secureserver.net,github.com/gdcorp-*"
        run: |
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${SECURESERVER_ACCESS_KEY_GHC_SA}"
          ssh-add - <<< "${GITHUBCLOUD_SSH_PRIVATE_KEY}"
          git config --global url.git@github.secureserver.net:.insteadOf https://github.secureserver.net/
          git config --global url.git@github.com:gdcorp-.insteadOf https://github.com/gdcorp-
          go mod tidy
          ssh-agent -k
      - name: Running apis/${{ matrix.go-apis }}
        run: |
          cd ./apis/${{ matrix.go-apis }}
          go mod tidy
          go get
          go fmt
          go build
      - name: Running tests for ${{ matrix.go-apis }}
        run: |
          cd ./apis/${{ matrix.go-apis }}
          go test
  go-code-check-lambdas:
    needs: tartufo
    runs-on: self-hosted

    strategy:
      matrix:
        go-lambdas: [manager] # Add golang infrastructure lambdas here

    steps:
      - name: Reset gitconfig
        run: |
          rm -f $HOME/.gitconfig
      - name: Checkout this repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Set up Go
        uses: actions/setup-go@3b4dc6cbed1779f759b9c638cb83696acea809d1
        with:
          go-version: '1.15.6'

      - name: Install dependencies
        env:
          GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
          SECURESERVER_ACCESS_KEY_GHC_SA: ${{ secrets.SECURESERVER_ACCESS_KEY_GHC_SA }}
          GITHUBCLOUD_SSH_PRIVATE_KEY: ${{ secrets.GITHUBCLOUD_SSH_PRIVATE_KEY }}
          GOPRIVATE: "github.secureserver.net,github.com/gdcorp-*"
        run: |
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${SECURESERVER_ACCESS_KEY_GHC_SA}"
          ssh-add - <<< "${GITHUBCLOUD_SSH_PRIVATE_KEY}"
          git config --global url.git@github.secureserver.net:.insteadOf https://github.secureserver.net/
          git config --global url.git@github.com:gdcorp-.insteadOf https://github.com/gdcorp-
          go mod tidy
          ssh-agent -k
      - name: Setting up AWS user for tests
        uses: aws-actions/configure-aws-credentials@cefc5912bc61e2b5a3b049c839fc283c7712d4e0
        with:
          aws-access-key-id: ${{ secrets.DEV_PRIVATE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_PRIVATE_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::345790377847:role/GD-AWS-USA-GD-ThreatTools-Dev-Private-Deploy
          role-duration-seconds: 3600

      - name: Running lambdas/${{ matrix.go-lambdas }}
        run: |
          cd ./lambdas/${{ matrix.go-lambdas }}
          go mod tidy
          go get
          go fmt
          go build
      - name: Running tests for ${{ matrix.go-lambdas }}
        env:
          TESTING_JWT: ${{ secrets.TESTING_JWT }}
        run: |
          cd ./lambdas/${{ matrix.go-lambdas }}
          go test
    # SPAQ dashboard
    # - name: Coverage upload to KPI Dashboard
    #   uses: ./gd-actions/spaq-quality
    #   with:
    #     service-key: "testing-github-actions-threat"

    # Cirrus Scans
