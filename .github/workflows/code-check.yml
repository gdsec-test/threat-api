name: Code quality check

on:
  pull_request:
    branches: [ develop ]

jobs:
  tartufo:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials for ECR access
        uses: aws-actions/configure-aws-credentials@ea7b857d8a33dc2fb4ef5a724500044281b49a5e
        with:
          aws-access-key-id: ${{ secrets.DEV_PRIVATE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_PRIVATE_AWS_SECRET_ACCESS_KEY }}
          role-to-assume: arn:aws:iam::345790377847:role/GD-AWS-USA-GD-ThreatTools-Dev-Private-Deploy
          role-duration-seconds: 1200                                 # default max is 7200
          aws-region: us-west-2                                       # set region you want to target

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@41032bd0f8164c350fb597a5e1ec886624de7465

      - name: Docker login for Golden Containers ECR
        env:
          ECR_REGISTRY: 764525110978.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com # Do NOT change (region pulled from above)!
        run: |
          echo "Using: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Checkout Current Repo to be Scanned
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579

      - name: Checkout Tartufo Repo
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
        with:
          repository: gdcorp-actions/tartufo
          token: ${{ secrets.REPO_CLONE_TOKEN_SA_PAT }} # PAT with read access to gdcorp-actions/tartufo
          path: tartufo
          ref: v2.6.0
          persist-credentials: false # Do not persist auth token in local git config.

      - name: Tartufo secret scanning using the Tartufo GitHub Action
        uses: ./tartufo
        with:
          github_token: ${{ secrets.REPO_CLONE_TOKEN_SA_PAT }}

  python-code-check:
    needs: tartufo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579

      - name: Set up Python 3.9.0
        uses: actions/setup-python@f38219332975fe8f9c04cca981d674bf22aea1d3
        with:
          python-version: 3.9.0
          architecture: 'x64'

      - name: Setup Python Environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install -U pip
      - name: Install Python dependencies
        env:
          SECURESERVER_ACCESS_KEY_GHC_SA: ${{ secrets.SECURESERVER_ACCESS_KEY_GHC_SA }}
          GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
        run: |
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${SECURESERVER_ACCESS_KEY_GHC_SA}"
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -U -r requirements.txt -r requirements-test.txt
          ssh-agent -k
#       flask8 is failing on lot of files, switching off temporarily
#      - name: Lint with flake8
#        run: |
#          source venv/bin/activate
#          flake8 ./apis  ./tools ./sceptre/resources/authorizer
#       Pylint is failing on lot of files, switching off temporarily
#       - name: Lint with pylint
#         run: |
#           source venv/bin/activate
#           pylint ./apis ./sceptre/resources/authorizer ./tools

      - name: Static security analysis with Bandit
        run: |
          source venv/bin/activate
          bandit -r  ./apis ./sceptre/resources/authorizer ./tools
      - name: Python Tests
        run: |
          source venv/bin/activate
          python -m pytest -v

  go-code-check:
    needs: tartufo
    runs-on: self-hosted

    steps:
      - name: Reset gitconfig
        run: |
          rm -f $HOME/.gitconfig
      - name: Checkout this repository
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579

#      TODO: Remove this actual AWS access once we have dependency injection
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@ea7b857d8a33dc2fb4ef5a724500044281b49a5e
        with:
          aws-access-key-id: ${{ secrets.DEV_PRIVATE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_PRIVATE_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::345790377847:role/GD-AWS-USA-GD-ThreatTools-Dev-Private-Deploy
          role-duration-seconds: 3600

      - name: Set up Go
        uses: actions/setup-go@331ce1d993939866bb63c32c6cbbfd48fa76fc57
        with:
          go-version: '1.17.2'

      - name: Install dependencies
        env:
          GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
          SECURESERVER_ACCESS_KEY_GHC_SA: ${{ secrets.SECURESERVER_ACCESS_KEY_GHC_SA }}
          GITHUBCLOUD_SSH_PRIVATE_KEY: ${{ secrets.GITHUBCLOUD_SSH_PRIVATE_KEY }}
          GOPRIVATE: "github.secureserver.net,github.com/gdcorp-*"
        run: |
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${SECURESERVER_ACCESS_KEY_GHC_SA}"
          ssh-add - <<< "${GITHUBCLOUD_SSH_PRIVATE_KEY}"
          git config --global url.git@github.secureserver.net:.insteadOf https://github.secureserver.net/
          git config --global url.git@github.com:gdcorp-.insteadOf https://github.com/gdcorp-
          go mod tidy
          ssh-agent -k
      - name: Go code checks and build
        run: |
          go fmt ./...
          go build ./...
      - name: Running go tests
        run: |
          go test ./... -tags runTests -gcflags=all=-l -cover

# List of tests skipped due to using real objects where mocks are required. To be later refined in unit test revamping.
#
#  1. /apis/servicenow/servicenowLibrary/servicenow_test.go
#  2. /apis/servicenow/servicenowLibrary/table_test.go
#  3. /apis/splunk/splunk_test.go
#  4. /apis/shodan/shodan_test.go
#  5. /apis/virustotal/virustotal_test.go

# Added separated jira stories for /lambdas folder as they aren't the usual "api" modules for unit testing
#  6. /lambdas/common/toolbox/sso_test.go
#  7. /lambdas/responseprocessor/responseprocessor_test.go
