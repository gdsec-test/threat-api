package main

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/lambda"
)

// InvokeVulnerabilityService starts vulnerability Lambda
func InvokeVulnerabilityService(ctx context.Context, request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	span, ctx := to.TracerLogger.StartSpan(ctx, "LaunchVulnerability", "vulnerability", "manager", "launchVulnerability")
	defer span.End(ctx)
	lambdaClient := lambda.New(to.AWSSession)
	lambdaRequest := map[string]string{}
	payload, _ := json.Marshal(lambdaRequest)
	result, err := lambdaClient.Invoke(&lambda.InvokeInput{FunctionName: aws.String(vulnerabilitywatchLambdaName), Payload: payload})
	if err != nil {
		fmt.Println("Error calling Vulnerability Watch Lambda")
		return events.APIGatewayProxyResponse{StatusCode: 500, Body: "Error marshalling response"}, fmt.Errorf("Error during invoke of vulnerability watch Lambda: %w", err)
	}
	// var decodedResult []byte
	// _, err = base64.StdEncoding.Decode(decodedResult, result.Payload)
	// if err != nil {
	// 	return events.APIGatewayProxyResponse{StatusCode: 500, Body: "Error decoding response from LaunchVulnerability"}, fmt.Errorf("error marshalling response: %w", err)
	// }
	return events.APIGatewayProxyResponse{StatusCode: 200, Body: string(result.Payload)}, nil
}
