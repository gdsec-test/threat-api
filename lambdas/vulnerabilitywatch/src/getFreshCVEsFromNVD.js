const fetch = (...args) =>
  import('node-fetch').then(({ default: fetch }) => fetch(...args));

const Logger = require('./logger');

module.exports = async function getFreshCVEsFromNVD({
  apiKey,
  endpoint,
  periodDays,
  resultsPerPage,
  throttleTimeout
}) {
  const formatDate = (date) =>
    date.toISOString().replace(/(:\d{2})(\.)(\d{3,})(Z)/gm, '$1:$3 UTC');
  const end = new Date();
  let start = new Date();
  start.setDate(end.getDate() - periodDays);
  let startIndex = 0;
  let totalResults = Number.POSITIVE_INFINITY;
  let CVEList = new Map();
  Logger.log('Start fetching CVEs from NVD');
  do {
    try {
      const URL = `${endpoint}?apiKey=${apiKey}&resultsPerPage=${resultsPerPage}&modStartDate=${formatDate(
        start
      )}&modEndDate=${formatDate(end)}&startIndex=${startIndex}`;
      let isError = false;
      const responseData = await fetch(URL)
        .catch((error) => {
          isError = error;
          Logger.log(
            'Error caught while fetching CVEs from NVD ' +
              JSON.stringify(isError)
          );
        })
        .then((response = {}) => {
          const {
            ok,
            status = 'Unknown',
            statusText = 'Request failed'
          } = response;
          if (!ok || !response.json) {
            isError = new Error(status + statusText);
            Logger.log(
              `Fetching CVEs from ${startIndex} to ${
                startIndex + parseInt(resultsPerPage)
              } is not successfull: ${isError}`
            );
            return { ok, status, statusText };
          } else {
            return response.json();
          }
        });
      if (isError) {
        Logger.log('Error fetching CVEs from NVD ' + JSON.stringify(isError));
        break;
      }
      totalResults = responseData.totalResults || 0;
      Logger.log(
        `Fetching CVEs from ${startIndex} to ${
          startIndex + parseInt(resultsPerPage)
        } is successfull, total results are ${totalResults}`
      );
      const { result: { CVE_Items = [] } = {} } = responseData;
      const currentCVEList = new Map(
        Object.entries(
          CVE_Items.reduce((acc, item) => {
            const { cve: { CVE_data_meta: { ID } } = {} } = item;
            acc[ID] = item;
            return acc;
          }, {})
        )
      );
      CVEList = new Map([...CVEList, ...currentCVEList]);
      startIndex += parseInt(resultsPerPage);
      if (startIndex < totalResults) {
        // adding throttle timeouts to avoid rejected requests
        await new Promise((resolve) =>
          setTimeout(() => resolve(), parseInt(throttleTimeout))
        );
      }
    } catch (err) {
      Logger.error(
        `Something went wrong during fetching CVEs from NVD: ${JSON.stringify(
          err
        )}`
      );
    }
  } while (startIndex < totalResults);
  Logger.log('Finished fetching CVE from NVD');
  return CVEList;
};
