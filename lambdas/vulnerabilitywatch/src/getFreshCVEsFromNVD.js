const fetch = (...args) =>
  import('node-fetch').then(({ default: fetch }) => fetch(...args));

module.exports = async function getFreshCVEsFromNVD({
  apiKey,
  endpoint,
  periodDays,
  resultsPerPage,
  throttleTimeout
}) {
  const formatDate = (date) =>
    date.toISOString().replace(/(:\d{2})(\.)(\d{3,})(Z)/gm, '$1:$3 UTC');
  const end = new Date();
  let start = new Date();
  start.setDate(end.getDate() - periodDays);
  let startIndex = 0;
  let totalResults = Number.POSITIVE_INFINITY;
  let CVEList = new Map();
  do {
    const URL = `${endpoint}?apiKey=${apiKey}&resultsPerPage=${resultsPerPage}&modStartDate=${formatDate(
      start
    )}&modEndDate=${formatDate(end)}&startIndex=${startIndex}`;
    let isError = false;
    const responseData = await fetch(URL)
      .catch((error) => {
        isError = error;
      })
      .then((response = {}) => {
        const {
          ok,
          status = 'Unknown',
          statusText = 'Request failed'
        } = response;
        if (!ok) {
          isError = new Error(status + statusText);
        }
        return response.json ? response.json() : { ok, status, statusText };
      });
    if (isError) {
      console.log(isError);
      break;
    }
    totalResults = responseData.totalResults || 0;
    const { result: { CVE_Items = [] } = {} } = responseData;
    const currentCVEList = new Map(
      Object.entries(
        CVE_Items.reduce((acc, item) => {
          const { cve: { CVE_data_meta: { ID } } = {} } = item;
          acc[ID] = item;
          return acc;
        }, {})
      )
    );
    CVEList = new Map([...CVEList, ...currentCVEList]);
    startIndex += parseInt(resultsPerPage);
    if (startIndex < totalResults) {
      // adding throttle timeouts to avoid rejected requests
      await new Promise((resolve) =>
        setTimeout(() => resolve(), parseInt(throttleTimeout))
      );
    }
  } while (startIndex < totalResults);
  return CVEList;
};
