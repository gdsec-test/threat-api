const { TABLE_NAME } = require('./const');
const Logger = require('./logger');

module.exports = async function getCVEsFromDB({ dynamodb }) {
  const query = {
    TableName: TABLE_NAME,
    ProjectionExpression: 'cve_id,score'
  };
  let dbCVEs = new Map();
  let LastEvaluatedKey, err;
  Logger.log('Start fetching existing CVE from DynamoDB');
  try {
    do {
      const result = await new Promise((resolve) => {
        const currentQuery = LastEvaluatedKey
          ? { ...query, ExclusiveStartKey: LastEvaluatedKey }
          : query;
        dynamodb.scan(currentQuery, function (err, data) {
          if (err) {
            Logger.log(
              'Error happened during scanning for CVES ' + JSON.stringify(err)
            );
            resolve({ err });
          } else {
            const { LastEvaluatedKey, Items = [], Count } = data;
            Logger.log(
              `Fetching existing CVEs ${Count} from DynamoDB is successfull`
            );
            resolve({ LastEvaluatedKey, Items, Count });
          }
        });
      });
      LastEvaluatedKey = result.LastEvaluatedKey;
      err = result.err;

      const currentCVEs = new Map(
        Object.entries(
          result.Items.reduce((acc, item) => {
            const { cve_id: { S: ID } = {}, score: { N: score } = {} } = item;
            acc[ID] = score;
            return acc;
          }, {})
        )
      );
      dbCVEs = new Map([...dbCVEs, ...currentCVEs]);
    } while (LastEvaluatedKey && !err);
  } catch (err) {
    Logger.log('Error happened during fetching CVEs ' + JSON.stringify(err));
  }
  return Promise.resolve(dbCVEs);
};
