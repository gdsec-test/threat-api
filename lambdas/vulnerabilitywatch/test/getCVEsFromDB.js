const { expect } = require('chai');
const getCVEsFromDB = require('../src/getCVEsFromDB');
const Logger = require('../src/logger');

describe('Get CVEs From DB', function () {
  let dynamodb, scanStub;

  beforeEach(() => {
    scanStub = sandbox.stub();
    dynamodb = {
      scan: scanStub
    };
  });

  it('should scan DynamoDB with proper query', function () {
    getCVEsFromDB({ dynamodb });
    expect(scanStub).to.have.been.calledWith({
      TableName: 'cve',
      ProjectionExpression: 'cve_id,score'
    });
  });

  describe('Get results', () => {
    let data,
      LastEvaluatedKey,
      Count,
      Items = [];
    beforeEach(() => {
      Items.push([{ cve_id: { S: 'CVE-20211212' }, score: { N: 8 } }]);
      Items.push([{ cve_id: { S: 'CVE-2020456' }, score: { N: 5 } }]);
      Count = 0;
      LastEvaluatedKey = 'someKey';
      data = { LastEvaluatedKey, Count };
    });

    it('should process results if no errors', async () => {
      let callCount = 0;
      scanStub.callsFake(function (query, callback) {
        data.Items = Items[callCount];
        callCount++;
        if (callCount === Items.length) {
          data.LastEvaluatedKey = null;
        }
        callback(null, data);
      });
      const expectedCVEs = new Map(
        Object.entries({ 'CVE-20211212': 8, 'CVE-2020456': 5 })
      );
      const res = await getCVEsFromDB({ dynamodb });
      expect(res).to.deep.equal(expectedCVEs);
    });

    describe('Error during fetching', () => {
      let err;
      beforeEach(() => {
        err = { message: 'i am some error' };
        scanStub.callsFake(function (query, callback) {
          callback(err, data);
        });
      });
      it('should return empty result if errors during fetching', async () => {
        const res = await getCVEsFromDB({ dynamodb });
        expect(res).to.deep.equal(new Map());
      });
      it('should catch error during fetching', async () => {
        const logStub = sandbox.stub(Logger, 'log');
        await getCVEsFromDB({ dynamodb });
        expect(logStub).to.have.been.calledWith(
          'Error happened during scanning for CVES ' + JSON.stringify(err)
        );
      });
    });
  });
});
