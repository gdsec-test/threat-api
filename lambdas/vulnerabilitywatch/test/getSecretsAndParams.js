const { expect } = require('chai');
const getSecretsAndParams = require('../src/getSecretsAndParams');
const AWS = require('aws-sdk');
const { AWS_DEFAULT_REGION } = require('../src/const');

describe('Get Secrets and Params', () => {
  let client, getSecretValueStub, region;
  beforeEach(() => {
    region = AWS_DEFAULT_REGION;
    getSecretValueStub = sandbox.stub();
    client = {
      getSecretValue: getSecretValueStub
    };
    sandbox.stub(AWS, 'SecretsManager').returns(client);
  });

  it('should call AWS to get vulnerability watch secret', () => {
    getSecretsAndParams({ region });
    expect(getSecretValueStub).to.have.been.calledWith({
      SecretId: 'vulnerabilitywatch'
    });
  });

  describe('Return Request', () => {
    let callback, err;
    beforeEach(() => {
      getSecretValueStub.callsFake((params, callbackFn) => {
        callback = callbackFn;
      });
    });

    it('should return error if something is wrong with request', async () => {
      err = 'I am error to get secrets 52345';
      getSecretValueStub.callsFake((params, callbackFn) => {
        callback = callbackFn;
        callback(err);
      });
      const result = await getSecretsAndParams({ region });
      expect(result).to.deep.equal({ err });
    });

    it('should parse secret and return it', async () => {
      const data = {
        SecretString: JSON.stringify({
          prop: 'I am some secretg erth3y5w54',
          configs: JSON.stringify([{ prop1: 'some config' }]),
          resultsPerPage: '45'
        })
      };
      getSecretValueStub.callsFake((params, callbackFn) => {
        callback = callbackFn;
        callback(null, data);
      });
      const result = await getSecretsAndParams({ region });
      expect(result).to.deep.equal({
        prop: 'I am some secretg erth3y5w54',
        configs: [{ prop1: 'some config' }],
        resultsPerPage: 45
      });
    });
  });
});
