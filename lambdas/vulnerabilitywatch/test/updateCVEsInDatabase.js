const { expect } = require('chai');
const sinon = require('sinon');
const saveCVE = require('../src/saveCVE');
const updateCVEsInDatabase = require('../src/updateCVEsInDatabase');

describe('Name of the group', () => {
  let saveCVEStub, CVEList;

  beforeEach(() => {
    saveCVEStub = sandbox.stub(saveCVE, 'saveCVE').resolves(true);
    CVEList = [
      [
        'CVE-1',
        {
          prop: 'CVE-1',
          impact: {
            baseMetricV3: { cvssV3: { baseScore: 4 } }
          }
        }
      ],
      [
        'CVE-2',
        {
          prop: 'CVE-2',
          impact: {
            baseMetricV3: { cvssV3: { baseScore: 7 } }
          }
        }
      ]
    ];
  });

  it('should save list of new CVEs in DB', async () => {
    const freshCVEs = new Map(CVEList);
    await updateCVEsInDatabase({
      freshCVEs,
      CVEsFromDB: new Map(),
      dynamodb: { putItem: () => {} }
    });
    for (var [ID, freshCVE] of freshCVEs) {
      expect(saveCVEStub).to.have.been.calledWith(
        sinon.match.has('item', freshCVE)
      );
    }
  });

  it('should update list of existing CVEs in DB', async () => {
    const freshCVEs = new Map(CVEList);
    const CVEsFromDB = new Map([
      ['CVE-1', 6],
      ['CVE-2', 4]
    ]);
    await updateCVEsInDatabase({
      freshCVEs,
      CVEsFromDB,
      dynamodb: { putItem: () => {} }
    });

    for (var [ID, freshCVE] of freshCVEs) {
      expect(saveCVEStub).to.have.been.calledWith(
        sinon.match.has('item', freshCVE)
      );
    }
  });
});
