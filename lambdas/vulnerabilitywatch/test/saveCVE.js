const { expect } = require('chai');
const { saveCVE } = require('../src/saveCVE');

describe('Save CVE record in Database', () => {
  let dynamodb, putItemStub, item;
  beforeEach(() => {
    putItemStub = sandbox.stub();
    dynamodb = {
      putItem: putItemStub
    };
    item = {
      cve: { CVE_data_meta: { ID: 'CVE-3456' } },
      impact: {
        baseMetricV3: { cvssV3: { baseSeverity: 4 } }
      },
      publishedDate: 'some publish date',
      lastModifiedDate: 'some last date'
    };
  });

  it('saves CVE record in proper format', async () => {
    putItemStub.callsFake((params, callback) => {
      callback(null, {});
    });
    await saveCVE({ item, dynamodb });
    expect(putItemStub).to.have.been.calledWith({
      Item: {
        cve_id: { S: 'CVE-3456' },
        score: { N: '0' },
        severity: { S: '4' },
        publishedDate: { S: 'some publish date' },
        lastModifiedDate: { S: 'some last date' },
        cpe: { L: [] },
        report: {
          B: Buffer.from(JSON.stringify(item), 'base64').toString('utf8')
        }
      },
      ReturnConsumedCapacity: 'TOTAL',
      TableName: 'cve'
    });
  });

  it('returns results in proper format', async () => {
    putItemStub.callsFake((params, callback) => {
      callback(null, {
        success: true
      });
    });
    const result = await saveCVE({ item, dynamodb });
    expect(result).to.be.deep.equal({ err: null, data: { success: true } });
  });
});
