const { expect } = require('chai');
const {
  CHANNEL_PROVIDERS,
  notifyAlertsViaChannels
} = require('../src/notifyAlertsViaChannels');
const Logger = require('../src/logger');

describe('Notify Alerts Via Channels', () => {
  let slackStub,
    params,
    configs,
    periodDays,
    cveCatalogURL,
    updatedCVEs,
    newCVEs;

  beforeEach(() => {
    slackStub = sandbox.stub(CHANNEL_PROVIDERS, 'slack');
    configs = [];
    periodDays = 4;
    cveCatalogURL = 'some cveCatalogURL vsadg';
    params = { periodDays, cveCatalogURL, configs };
    updatedCVEs = [{ score: 5 }];
    newCVEs = [{ score: 6 }];
  });

  it('should return error if no provider handler exists', async () => {
    const type = 'unknown_provider';
    configs.push({
      input: {},
      output: { type, creds: {} }
    });
    const errorStub = sandbox.stub(Logger, 'error');
    await notifyAlertsViaChannels({
      updatedCVEs,
      newCVEs,
      params
    });
    expect(errorStub).to.have.been.calledWith(
      `Unable to send notifications via ${type} channel, cause no handler code supported`
    );
  });

  describe('Slack', () => {
    it('should call slack handler to send', async () => {
      const type = 'slack';
      configs.push({
        input: { cvssRange: [4, 7] },
        output: { type, creds: {} }
      });
      await notifyAlertsViaChannels({
        updatedCVEs,
        newCVEs,
        params
      });
      expect(slackStub).to.have.been.calledWith({
        periodDays: 4,
        updatedCVEs: [{ score: 5 }],
        newCVEs: [{ score: 6 }],
        cveCatalogURL: 'some cveCatalogURL vsadg',
        cvssRange: [4, 7],
        creds: {}
      });
    });
  });
});
