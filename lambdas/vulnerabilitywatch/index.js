const AWS = require('aws-sdk');
// strange way to support CommonJS in node-fetch https://github.com/node-fetch/node-fetch#commonjs

const Logger = require('./src/logger');
const createCVETableIfNotExist = require('./src/createCVETableIfNotExist');
const getSecretsAndParams = require('./src/getSecretsAndParams');
const getFreshCVEsFromNVD = require('./src/getFreshCVEsFromNVD');
const getCVEsFromDB = require('./src/getCVEsFromDB');
const { AWS_DEFAULT_REGION } = require('./src/const');
const updateCVEsInDatabase = require('./src/updateCVEsInDatabase');
const { notifyAlertsViaChannels } = require('./src/notifyAlertsViaChannels');

// Handler
async function handler(event, context = {}) {
  const region = process.env.AWS_REGION || AWS_DEFAULT_REGION; // provided by Lambda environment
  Logger.init({
    region,
    streamName: context.logStreamName,
    groupName: context.logGroupName
  });
  const now = new Date();
  Logger.log('Function start at ' + now.toUTCString());
  const ok = await createCVETableIfNotExist({ region });
  if (!ok) {
    return Promise.resolve(false);
  }
  const secretsAndParams = await getSecretsAndParams({ region });
  if (secretsAndParams.err) {
    Logger.error(
      'Error during fetching Secrets' + JSON.stringify(secretsAndParams.err)
    );
    return context.logStreamName;
  }
  const freshCVEs = await getFreshCVEsFromNVD(secretsAndParams);
  var dynamodb = new AWS.DynamoDB({ region, maxRetries: 3, sslEnabled: true });
  const CVEsFromDB = await getCVEsFromDB({ dynamodb });
  const { updatedCVEs, newCVEs } = await updateCVEsInDatabase({
    freshCVEs,
    CVEsFromDB,
    dynamodb
  });
  await notifyAlertsViaChannels({
    updatedCVEs,
    newCVEs,
    params: secretsAndParams
  });
  Logger.flushLogs();
  return {
    logstream: context.logStreamName,
    startedOn: new Date().toUTCString(),
    updatedCVEs: updatedCVEs.map(({ ID, oldScore, score }) => ({
      ID,
      oldScore,
      score
    })),
    newCVEs: newCVEs.map(({ ID, score }) => ({
      ID,
      score
    }))
  };
}
handler.handler = handler;
module.exports = handler;
exports.handler = handler;
